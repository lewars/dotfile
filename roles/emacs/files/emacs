;;; .emacs --- Emacs initalization file -*- mode: emacs-lisp; lexical-binding: t; -*-

;; Copyright (C) 1996-2024 Alistair Y. Lewars

;; Author: Alistair Y. Lewars

;;; Commentary:
;;
;; Created with ❤️

;;; Code:

(setq gc-cons-threshold 100000000)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

(when (string-equal system-type "darwin")
  ;; TODO(lewars): This is needed to overcome a bug with Emacs <29,
  ;; running on MacOs >=13. Remove when upgrading Emacs to 29.
  (setq image-types (cons 'svg image-types)))

(when (string-equal system-type "gnu/linux")
  (defvar ispell-program-name "aspell"))

(defun monitor-name-is-eDP-1 ()
  "Return t if any monitor is named 'eDP-1'."
  (seq-some (lambda (monitor)
              (equal (cdr (assoc 'name monitor)) "eDP-1"))
            (display-monitor-attributes-list)))

(defun le/first-monitor-larger-than-3840x2400 ()
  "Check if the first monitor's geometry has a resolution greater than 3840x2400."
  (let* ((monitor-attrs (car (display-monitor-attributes-list)))
         (geometry (cdr (assoc 'geometry monitor-attrs)))
         (width (nth 2 geometry))
         (height (nth 3 geometry)))
    (and (> width 3840) (> height 2400))))

(setq ispell-dictionary "english")
(setq ispell-silently-savep t)
(setq ispell-personal-dictionary (expand-file-name "~/.ispell_english"))

(if (string-equal system-type "gnu/linux")
    (if (monitor-name-is-eDP-1)
        (setq my-default-font-height 150)
      (setq my-default-font-height 100))
    (setq my-default-font-height 125))

(set-face-attribute 'default nil :height my-default-font-height :foundry "ADBO" :family "Source Code Pro")

(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)

(require 'use-package)
(require 'quelpa-use-package)

;; Misc configs
(recentf-mode 1)
(setq recentf-max-menu-items 50)
(setq recentf-max-saved-items 50)
(run-at-time nil (* 5 60) 'recentf-save-list)

(global-unset-key (kbd "C-z"))
(global-set-key "\C-x\ \C-r" 'fzf-recentf)
(global-set-key "\C-x\ \C-y" 'find-file-read-only)

;; Re-define help mode keys
(define-key help-mode-map (kbd "^") 'help-go-back)

(setq-default indent-tabs-mode nil)

(setq explicit-shell-file-name "/bin/bash")
(eval-after-load "term"
  '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))

;; Only vailable in emacs 29.1
;; (setq auto-save-visited-predicate
;;       (lambda () (eq major-mode 'org-mode)
;;         auto-save-visited-interval 5))

(defun le/my-c-mode-hook ()
  "This hook define hooks for 'c-mode'."
  (setq indent-tabs-mode nil))

(add-hook 'c-mode-hook 'le/my-c-mode-hook)
(set-scroll-bar-mode nil)
(tool-bar-mode -1)
(menu-bar-mode -1)
(setq use-dialog-box nil)

(defun le/run-command-on-save (command)
  "Run a specified COMMAND every time the current buffer is saved."
  (interactive "sEnter command to run on save: ")
  (add-hook 'after-save-hook
            (lambda ()
              (shell-command command))
            nil t))

;; Start emacs server
(if (display-graphic-p)
    '(server-mode t))
(require 'server)
(unless (server-running-p)
  (server-start))

;; set toggle-word-wrap to default to nil
;; (setq-default toggle-word-wrap nil)

(defun le/text-mode-init ()
  "This hook define hooks for 'text-mode'."
  (toggle-word-wrap 1)
  (visual-line-mode 1)
  (auto-fill-mode 0))
(add-hook 'text-mode-hook 'le/text-mode-init)

(defun le/my-whitespace-mode-hook ()
  "This hook define hooks for text and prog modes."
  (setq show-trailing-whitespace t
        whitespace-style '(face
    tabs spaces trailing lines space-before-tab newline
    indentation empty space-after-tab
    space-mark tab-mark
    missing-newline-at-eof)))
(add-hook 'prog-mode-hook 'le/my-whitespace-mode-hook)
(add-hook 'text-mode-hook 'le/my-whitespace-mode-hook)

(global-set-key "\C-cw" 'whitespace-mode)
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)
(global-set-key (read-kbd-macro "C-x f") 'find-file-at-point)

;; Setup keybinding for eww
(defun le/my-eww-config ()
    "For use in `eww-mode-hook'."
    (local-set-key (kbd "^") #'eww-back-url)
    ;; more here
    )

(when (fboundp 'eww-mode)
  (add-hook 'eww-mode-hook 'le/my-eww-config))

(setq inhibit-startup-screen t)
(setq display-time-day-and-date t)
(display-time-mode t)

(setq mouse-wheel-scroll-amount '(0.01))
(setq read-buffer-completion-ignore-case t)
(setq read-file-name-completion-ignore-case t)
(setq completion-cycle-threshold t)

(add-hook 'prog-mode-hook 'outline-minor-mode)
(add-hook 'prog-mode-hook 'hs-minor-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(dolist (mode '(prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-fill-column-indicator-mode 120))))
(add-hook 'prog-mode-hook (lambda ()
                            (setq-local hl-line-mode t)
                            (setq fill-column 120)))

(use-package yasnippet
  :ensure t)
(require 'yasnippet)
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
(setq yas-wrap-around-region t)
(setq yas-triggers-in-field t)
(setq yas/triggers-in-field t)

(yas-global-mode 1)
(yas-reload-all)
(add-hook 'prog-mode-hook #'yas-minor-mode)
(global-set-key "\M-/" 'hippie-expand)
(add-to-list 'hippie-expand-try-functions-list 'yas-hippie-try-expand)

(setq display-buffer-alist
      '(
        ("\\*vterm\\*"
         (display-buffer-in-side-window)
         (window-height . 0.2)
         (side . bottom)
         (slot . -1))
        ("\\*\\([Hh]elp.*\\|[Ii]nfo\\|.*[Ff]inder.*\\|Apropos\\)\\*"
         ;; todo - have matched buffers use the same window
         (display-buffer-reuse-window
          display-buffer-in-direction)
         (mode . '(help-mode Info-mode))
         (window . root)
         (direction . right)
         (window-width . 0.48))
        ("\\*\\(Flycheck errors\\|python-black errors\\|Backtrace\\)\\*"
         (display-buffer-in-side-window)
         (window-height . 0.2)
         (side . bottom)
         (slot . 0))
        ("\\*Org todo\\*"
         (display-buffer-at-bottom)
         (window-height . 0.3))
        ))

;; Configure EAF browser
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-application-framework/")
;; (require 'eaf)
;; (require 'eaf-browser)

(defun le/my-find-file-symlink-target ()
  "Follow symlinks for specific files, avoiding the VC prompt."
  (let ((filename (file-name-nondirectory (buffer-file-name))))
    (when (or (equal filename ".emacs")
              (equal filename ".bashrc"))
      (setq vc-follow-symlinks t))))

(add-hook 'find-file-hook 'le/my-find-file-symlink-target)

;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)
;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)

;; Setup Dired Git integration
(use-package nerd-icons-dired
  :ensure t
  :hook
  (dired-mode . nerd-icons-dired-mode))

;; (use-package dired-git
;;   :ensure t
;;   :hook (dired-mode . dired-git-mode))

;; Setup dired-single
(use-package dired-single
  :ensure t)

(require 'dired-single)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-matching-paren t)
 '(column-number-mode 1)
 '(display-fill-column-indicator-column 120)
 '(fill-column 120)
 '(frame-background-mode nil)
 '(imenu-auto-rescan t)
 '(magit-bury-buffer-function 'magit-restore-window-configuration)
 '(org-agenda-files '("~/git/org/todo/gtd.org"))
 '(package-selected-packages
   '(k8s-mode helm npm-mode xterm-color company-emoji edit-server ibuffer-projectile consult-git-log-grep consult-ls-git consult-dir * consult-flycheck consult-projectile consult-yasnippet consult all-the-icons bats bats-mode lsp-pyright lsp-ui lsp-mode dired-git-mode async org-modern consult-lsp helpful org-make-toc diminish nerd-icons-dired dired-single dired-git origami visual-fill-column emojify which-key idle-highlight-mode company-box dashboard-project-status dashboard-hackernews dashboard-ls dashboard nerd-icons-corfu expand-region company-quickhelp tree-sitter ansible-vault ansible-doc ansible yasnippet-snippets lsp-treemacs marginalia centaur-tabs bazel jinja2-mode highlight-symbol color-theme direx fzf dumb-jump flycheck-posframe flycheck-grammarly json-navigator json-mode pyenv-mode pyvenv-auto nerd-icons python-mode groovy-mode imenu-anywhere imenu-list yaml-mode windresize vterm vertico-posframe treemacs-projectile treemacs-persp treemacs-nerd-icons treemacs-magit treemacs-icons-dired terraform-mode terraform-doc quelpa-use-package python-black orderless multiple-cursors markdown-mode jedi iedit icomplete-vertical highlight-indent-guides helm-gtags go-mode git-modes ghub flyspell-correct-helm flymd flymake-yamllint flymake-shell flymake-python-pyflakes flymake-json flymake-gradle flymake-golangci flymake-go-staticcheck flymake-go flycheck-yamllint flycheck-color-mode-line flycheck-aspell find-file-in-project doom-themes doom-modeline dockerfile-mode corfu copilot))
 '(warning-suppress-types '((lsp-mode) (comp))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-bright-black ((t (:background "#222D32" :foreground "dark gray"))))
 '(bold ((t (:weight extra-bold))))
 '(copilot-overlay-face ((t (:foreground "pale violet red"))))
 '(cursor ((t (:background "#c792ea"))))
 '(custom-comment ((t (:background "#171F24" :foreground "#EEFFFF"))))
 '(custom-comment-tag ((t (:foreground "dark gray"))))
 '(doom-themes-treemacs-root-face ((t (:inherit font-lock-string-face :height 0.85))))
 '(fixed-pitch ((t (:family "Source Code Pro" :height 180 :weight regular))))
 '(font-lock-comment-delimiter-face ((t (:inherit font-lock-comment-face :foreground "light gray"))))
 '(font-lock-comment-face ((t (:foreground "gray"))))
 '(font-lock-doc-face ((t (:inherit font-lock-comment-face :foreground "gray"))))
 '(fringe ((t (:inherit default :foreground "medium aquamarine"))))
 '(highlight ((t (:background "#c792ea" :foreground "#7d7c8a"))))
 '(highlight-symbol-face ((t (:background "#5a5400"))))
 '(ido-only-match ((t (:foreground "SpringGreen3"))))
 '(line-number ((t (:foreground "gray"))))
 '(line-number-current-line ((t (:foreground "white"))))
 '(mode-line ((t (:background "#1a2427" :foreground "#8396ac" :box nil))))
 '(mode-line-inactive ((t (:background "#394c55" :foreground "#8396ac" :box nil))))
 '(org-agenda-dimmed-todo-face ((t (:foreground "dark gray"))))
 '(org-block-begin-line ((t (:inherit org-block :extend t :background "#222D32" :foreground "SlateGray3"))))
 '(org-document-title ((t (:foreground "#82aaff" :weight extra-bold :height 1.3))))
 '(org-drawer ((t (:foreground "SlateGray3"))))
 '(org-ellipsis ((t (:foreground "light green" :underline nil))))
 '(org-headline-done ((t (:foreground "gray"))))
 '(org-hide ((t (:foreground "gray60"))))
 '(org-level-1 ((t (:inherit outline-1 :weight extrabold :height 1.7))))
 '(org-level-2 ((t (:inherit outline-2 :weight extrabold :height 1.5))))
 '(org-level-3 ((t (:inherit outline-3 :weight extrabold :height 1.5))))
 '(org-level-4 ((t (:inherit outline-4 :weight extrabold :height 1.2))))
 '(org-level-5 ((t (:inherit outline-5 :weight extrabold :height 1.128))))
 '(org-meta-line ((t (:foreground "SlateGray3"))))
 '(org-modern-block-name ((t (:weight semi-light :height 0.8))))
 '(org-modern-label ((t (:box t (:line-width (0 . -3) :color "#263238") :underline nil :weight extra-bold :height 0.95 :width condensed))))
 '(org-modern-todo ((t (:inherit (org-todo org-modern-label) :inverse-video t :underline nil :weight extra-bold :height 0.95 :width condensed))))
 '(org-property-value ((t (:foreground "SlateGray3"))) t)
 '(org-scheduled-today ((t (:foreground "dark gray"))))
 '(org-special-keyword ((t (:foreground "SlateGray3"))))
 '(org-tag ((t (:foreground "cyan3" :weight normal))))
 '(org-time-grid ((t (:foreground "gray80"))))
 '(org-upcoming-distant-deadline ((t (:foreground "red1"))))
 '(region ((t (:extend t :background "IndianRed4"))))
 '(shadow ((t (:foreground "rosy brown"))))
 '(show-paren-match ((t (:background "dim gray" :foreground "cyan" :weight ultra-bold))))
 '(treemacs-root-face ((t (:inherit font-lock-string-face :weight bold :height 1.0))))
 '(vertical-border ((t (:background "#1a2427" :foreground "#1a2427")))))

;; Misc
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package nerd-icons
  :ensure t
  )

;; ========== Developer configurations ===========
(use-package fzf
  :bind
    ;; TODO(slams): set keybinds
  :config
  (setq fzf/args "-x --print-query --margin=1,0 --no-hscroll"
        fzf/executable "fzf"
        fzf/git-grep-args "-i --line-number %s"
        ;; command used for `fzf-grep-*` functions
        ;; example usage for ripgrep:
        fzf/grep-command "rg --no-heading -nH"
        ;; fzf/grep-command "grep -nrH"
        ;; If nil, the fzf buffer will appear at the top of the window
        fzf/position-bottom t
        fzf/window-height 15))

(use-package dumb-jump
  :ensure t)
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)

(use-package rg
  :ensure t)
(rg-enable-default-bindings)

(use-package highlight-indent-guides
  :ensure t
  :hook  (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-mode t
        highlight-indent-guides-method 'bitmap
        highlight-indent-guides-bitmap-function 'highlight-indent-guides--bitmap-line))

(use-package text-mode
  :config (setq-local show-trailing-whitespace nil))


(use-package highlight-symbol
  :ensure t
  ;; :hook (prog-mode . highlight-symbol-mode)
  :config
  (setf highlight-symbol-idle-delay 0)
  :bind (("M-s" . highlight-symbol-at-point)
         ("M-S" . highlight-symbol-remove-all)))

(use-package idle-highlight-mode
  :ensure t
  :config (setq idle-highlight-idle-time 1))

(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))

(use-package multiple-cursors
  :ensure t
  :bind (("C->" . mc/mark-next-like-this-symbol)
         ("C-<" . mc/mark-previous-like-this-symbol)
         ("C-x m" . mc/mark-all-symbols-like-this)
         ("C-x S-m" . mc/mark-all-dwim)))

(use-package imenu-list
  :ensure t
  :bind ("C-." . imenu-list-minor-mode)
  :config
  (setq imenu-list-focus-after-activation nil))
(global-set-key (kbd "C-'") #'imenu-list-smart-toggle)

;; (use-package imenu-anywhere
;;   :ensure t
;;   :bind (("C-." . ido-imenu-anywhere)))

(use-package bicycle
  :after outline
  :bind (:map outline-minor-mode-map
              ([C-tab] . bicycle-cycle)
              ([S-tab] . bicycle-cycle-global)))

(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map))
  :config
  (setq projectile-project-search-path '(("~/git" . 1))))

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package json
  :ensure t
  :config
  (add-hook 'json-mode-hook 'json-mode)
  (add-hook 'json-mode-hook 'outline-minor-mode)
  (add-hook 'json-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'json-mode-hook 'hs-minor-mode)
  (add-hook 'json-mode-hook 'display-line-numbers-mode)
  (add-hook 'json-mode-hook (lambda () (display-fill-column-indicator-column 120))))


;; ======= Language configuration ============
(add-to-list `auto-mode-alist '("\\.svg\\'" . nxml-mode))

(use-package python-mode
  :ensure t
  :hook (python-mode . (lambda () ((display-fill-column-indicator-column 88)
                                   (fill-column 88)))))

(use-package pyvenv-auto
  :hook ((python-mode . pyvenv-auto-run)))

(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode t)

  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter
                      (concat pyvenv-virtual-env "bin/python3")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))

(use-package groovy-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.gvy$" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.gy$" . groovy-mode))
  :config
  (setf (alist-get "Jenkinsfile.+$" auto-mode-alist) 'groovy-mode)
  (setq compile 'jenkins-lint))

(defvar yaml-formatting-enabled nil
  "Whether YAML formatting is currently enabled.")

(use-package yaml-mode
  :ensure t
  :hook
  ((yaml-mode . outline-minor-mode)
   (yaml-mode . hs-minor-mode)
   (yaml-mode . display-line-numbers-mode)
   (yaml-mode . le/yaml-mode-setup)
   (yaml-mode . highlight-indent-guides-mode)
   (yaml-mode . (lambda ()
                  (add-hook 'after-save-hook 'le/yaml-frmt nil t))))
  :config
  (defvar yaml-formatting-enabled t)
  (defun toggle-yaml-formatting ()
    "Toggle the state of YAML formatting."
    (interactive)
    (setq yaml-formatting-enabled (not yaml-formatting-enabled))
    (message "YAML formatting %s" (if yaml-formatting-enabled "enabled" "disabled")))
  (defun le/yaml-frmt ()
    "Conditionally reformat YAML file with yq based on `yaml-formatting-enabled'."
    (interactive)
    (when (and yaml-formatting-enabled (eq major-mode 'yaml-mode))
      (shell-command-to-string (format "yq eval-all -i %s" buffer-file-name))
      (revert-buffer t t t)
      (message "YAML file reformatted.")))
  (defun le/yaml-mode-setup ()
    "Setup yaml mode"
    (setq display-fill-column-indicator-column 120)
    (setq fill-column 160)
    (setq hs-minor-mode 1)
    (auto-fill-mode 0)
    (display-fill-column-indicator-mode 1))
  )

(use-package terraform-mode
  :ensure t
  :config
  (defun frmt-hcl ()
    "Reformat HCL file with terraform fmt."
    (when (eq major-mode 'terraform-mode)
      (shell-command-to-string (format "terraform fmt %s" buffer-file-name))
      (auto-revert-mode)))
  (add-hook 'after-save-hook 'frmt-hcl)
  (add-hook 'terraform-mode-hook 'outline-minor-mode)
  (add-hook 'terraform-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'terraform-mode-hook 'hs-minor-mode)
  (add-hook 'terraform-mode-hook 'display-line-numbers-mode)
  (add-hook 'terraform-mode-hook (lambda () ((display-fill-column-indicator-column 120)
                                             (fill-column 120)))))

(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  :config
  (add-hook 'markdown-mode-hook 'outline-minor-mode)
  (add-hook 'markdown-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'markdown-mode-hook 'hs-minor-mode)
  (add-hook 'markdown-mode-hook 'display-line-numbers-mode))


;; Linters and formatters
(use-package python-black
  :demand t
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))

(with-eval-after-load 'flycheck
  (flycheck-grammarly-setup))
(setq flycheck-grammarly-check-time 1.0)

(use-package flycheck
  :ensure t
  ;; :init (global-flycheck-mode)
  :bind (("M-n" . flycheck-next-error)
         ("M-p" . flycheck-previous-error))
  :config (setq-default flycheck-checker-error-threshold 2048))

;;  :config (setq-default flycheck-disabled-checkers '(emacs-lisp)))

;; (use-package flycheck-posframe
;;   :ensure t
;;   :after flycheck
;;   :config
;;   (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode)
;;   (flycheck-posframe-configure-pretty-defaults)
;;   (setq flycheck-posframe-warning-prefix "\u26a0 "))

;; Productivity
(use-package copilot
  :quelpa (copilot :fetcher github
                   :repo "zerolfx/copilot.el"
                   :branch "main"
                   :files ("dist" "*.el"))
  :ensure t
  :hook ((post-command-hook . copilot-clear-overlay))
         ;;(prog-mode . copilot-mode))
  :bind (("M-\\" . copilot-complete)
         :map copilot-completion-map
         ("C-g" . copilot-clear-overlay)
         ("<ESC>" . copilot-clear-overlay)
         ("C-p" . copilot-previous-completion)
         ("C-n" . copilot-next-completion)
         ("<tab>" . copilot-accept-completion)
         ("[tab]" . copilot-accept-completion)
         ("C-w" . copilot-accept-completion-by-word)
         ("C-l" . copilot-accept-completion-by-line))
  :config
  (setq copilot-idle-delay .5)
  (setq copilot-max-chars 1000000))

;; ibuffer
(use-package ibuffer
  :bind ("C-x C-b" . 'ibuffer)
  :custom
  (ibuffer-default-display-maybe-show-predicates t)
  (ibuffer-expert t)
  (ibuffer-saved-filter-groups
   '(("default"
      ("Magit"
       (or
        (mode . magit-status-mode)
        (mode . magit-log-mode)
        (name . "\\*magit")
        (name . "magit-")
        (name . "git-monitor")))
      ("Commands"
       (or
        (mode . shell-mode)
        (mode . ansi-mode)
        (mode . eshell-mode)
        (mode . term-mode)
        (mode . compilation-mode)))
      ("Rust"
       (or
        (mode . rust-mode)
        (mode . cargo-mode)
        (name . "\\*Cargo")
        (name . "^\\*rls\\(::stderr\\)?\\*")
        (name . "eglot")))
      ("C++"
       (or
        (mode . c-mode)
        (mode . c++-mode)))
      ("Lisp"
       (mode . emacs-lisp-mode))
      ("Dired"
       (mode . dired-mode))
      ("Gnus"
       (or
        (mode . message-mode)
        (mode . mail-mode)
        (mode . gnus-group-mode)
        (mode . gnus-summary-mode)
        (mode . gnus-article-mode)
        (name . "^\\.newsrc-dribble")
        (name . "^\\*\\(sent\\|unsent\\|fetch\\)")
        (name . "^ \\*\\(nnimap\\|nntp\\|nnmail\\|gnus\\|server\\|mm\\*\\)")
        (name . "\\(Original Article\\|canonical address\\|extract address\\)")))
      ("Org"
       (or
        (name . "^\\*Calendar\\*$")
        (name . "^\\*Org Agenda")
        (name . "^ \\*Agenda")
        (name . "^diary$")
        (mode . org-mode)))
      ("Perl"
       (or
        (mode . cperl-mode)
        (mode . perl-mode)))
      ("Python"
       (mode . python-mode))
      ("Terraform"
       (or
        (mode . terraform-mode)
        (name . "^\\.tf")
        (name . "^\\.tfvars")))
      ("Go"
       (or
        (mode . go-mode)
        (name . "^\\.go")))
      ("Groovy"
       (or
        (mode . groovy-mode)
        (name . "^\\.groovy")
        (name . "^\\.gy")
        (name . "^\\.gvy")))
      ("Yaml"
       (or
        (mode . yaml-mode)
        (name . "^\\.yaml")
        (name . "^\\.yml")))
      ("JSON"
       (or
        (mode . json-mode)
        (name . "^\\.json")))
      ("Markdown"
       (or
        (mode . markdown-mode)
        (name . "^\\.md")))
      ("Emacs"
       (or
        (name . "^\\*scratch\\*$")
        (name . "^\\*Messages\\*$")
        (name . "^\\*\\(Customize\\|Help\\)")
        (name . "\\*\\(Echo\\|Minibuf\\)"))))))
  (ibuffer-show-empty-filter-groups nil)
  (ibuffer-shrink-to-minimum-size t t)
  (ibuffer-use-other-window nil)
  :init
  (add-hook 'ibuffer-mode-hook
            #'(lambda ()
                (ibuffer-switch-to-saved-filter-groups "default"))))

;; (use-package ibuffer-git
;;   :ensure t
;;   :after ibuffer
;;   :bind (:map ibuffer-mode-map
;;               ("M-g" . ibuffer-git-filter-by-name)))

;;  org mode html publish post command
(defun le/my-org-publish-to-html (plist filename pub-dir)
  "Publish an org file to HTML, then run git commit."
  (org-html-publish-to-html plist filename pub-dir)
  (let ((commit-cmd (format "cd %s && git add %s && git commit -m 'Update %s'"
                            (shell-quote-argument pub-dir)
                            (shell-quote-argument (file-relative-name filename pub-dir))
                            (shell-quote-argument (file-relative-name filename pub-dir))))
        (mkdir-cmd (format "mkdir -p %s"
                           (shell-quote-argument pub-dir))))
  (shell-command mkdir-cmd)
  (shell-command commit-cmd)))

(defun le/org-mode-visual-fill ()
  "Setup visual-fill-mode."
  (setq visual-fill-column-width 130
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :ensure t
  :defer t
  :hook (org-mode . le/org-mode-visual-fill))

(add-hook 'visual-line-mode-hook #'visual-fill-column-mode)

(defun le/what-face (pos)
  "Show the face at the current point (POS) in the minibuffer."
  (interactive "d")
  (let ((face (or (get-char-property pos 'read-face-name)
                  (get-char-property pos 'face))))
    (if face
        (message "Face: %s" face)
      (message "No face at %d" pos))))

(defun le/org-mode-return ()
  "Insert a new heading or continue list item on RET, depending on context."
  (interactive)
  (if (org-at-heading-p)
      (org-return)
    (let ((line-start (buffer-substring-no-properties
                       (line-beginning-position)
                       (line-end-position))))
      (cond
       ((string-match "^ *\\(\\-\\|\\+\\|\\*\\) \\[ \\]" line-start) ; Checkbox items
        (org-insert-item t))
       ((string-match "^ *\\(\\-\\|\\+\\|\\*\\) " line-start) ; Unordered list items
        (org-insert-item))
       ((string-match "^ *\\([0-9]+\\)\\(\\.\\|)\\) " line-start) ; Ordered list items
        (org-insert-item nil))
       ((string-match "^ *\\(\\-\\|\\+\\|\\*\\) .* :: " line-start) ; Term/Description
        (org-insert-item))
       (t
        (org-return))))))

(defun le/org-mode-setup ()
  "Perform some org-mode setup at hook execution."
  (variable-pitch-mode 0)
  (auto-fill-mode 0)
  (visual-line-mode t)
  (setq-local show-trailing-whitespace nil)
  (setq-local hl-line-mode nil))

;; start of "use-package org" for the main org-mode section
(use-package org
  :defer t
  :init (setq org-replace-disputed-keys t)
  :hook
  (org-mode . le/org-mode-setup)
  :mode (("\\.org$" . org-mode))
  :config
  (add-hook 'org-mode-hook
          (lambda ()
            (setq-local yas/trigger-key [tab])
            (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)
            (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t)))
  (define-key org-mode-map (kbd "RET")  #'le/org-mode-return)
  (setq
   ;; Edit settings
   ;; org-auto-align-tags t
   org-catch-invisible-edits 'show-and-error
   org-cycle-separator-lines 2
   ;; org-edit-src-content-indentation 0
   org-fontify-quote-and-verse-blocks t
   ;; org-hide-block-startup nil
   ;; org-indent-indentation-per-level 0
   org-insert-heading-respect-content nil
   org-special-ctrl-a/e t
   ;; org-src-fontify-natively t
   ;; org-src-preserve-indentation nil
   ;; org-src-tab-acts-natively t
   ;; org-startup-folded 'content
   ;; org-indent-mode t
   org-startup-indented t
   ;; org-tags-column 0
   org-support-shift-select nil
   org-list-indent-offset 2
   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-log-repeat t
   org-blank-before-new-entry '((heading . nil) (plain-list-item . nil))

   org-ellipsis "▼"
   ;; org-ellipsis " ⤵"
   org-clock-sound "~/.emacs.d/org/media/alarm.wav"
   ;; TODO keywords setup
   org-todo-keywords
   '((sequence "TODO(t)" "IN-PROGRESS(p)" "IN-REVIEW(r)" "WAITING(w)" "BLOCKED(b)" "WONT-DO(x)" "|" "DONE(d)" "DELEGATE(D)")
     (sequence "REPEAT(R)" "|" "DONE(d)"))

   ;; ("TODO" . (:background "#c3e88d" :foreground "white" :weight extra-bold))
   ;; TODO face setup;
   org-modern-todo-faces
   '(("IN-PROGRESS" . (:background "DarkOrange" :foreground "white" :weight extra-bold))
     ("REPEAT" . (:background "DarkViolet" :foreground "white" :weight extra-bold))
     ("IN-REVIEW" . (:background "RoyalBlue" :foreground "white" :weight extra-bold))
     ("WAITING" . (:background "DarkOrange3" :foreground "white" :weight extra-bold))
     ("BLOCKED" . (:background "red" :foreground "white" :weight extra-bold))
     ("WONT-DO" . (:background "plum" :foreground "black" :weight extra-bold))
     ("DELEGATE" . (:background "DimGrey" :foreground "white" :weight extra-bold))
     ("DONE" . (:background "DarkGreen" :foreground "white" :weight extra-bold)))

   org-tag-faces
   '(("pin" . (:foreground "red" :weight bold)))

   ;; Agenda styling
   org-agenda-tags-column -80
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "⭠ now ─────────────────────────────────────────────────"
   ;; org-agenda-files (list "~/git/projects-org/project.org"
   ;;                        "~/git/work-org/general/gtd.org"
   ;;                        "~/git/learn-org/gtd.org")
   org-publish-project-alist
   '(("learn-org"
      :base-directory "~/git/learn-org/"
      :publishing-function org-html-publish-to-html
      :publishing-directory "~/git/learn-html"
      :section-numbers nil
      :with-toc t
      :recursive t
      )
     ("projects-org"
      :base-directory "~/git/projects-org"
      :publishing-function le/my-org-publish-to-html
      :publishing-directory "~/git/projects-html"
      :section-numbers nil
      :with-toc t
      :recursive t
      )
     ("kb-org"
      :base-directory "~/git/kb-org"
      :publishing-function le/my-org-publish-to-html
      :publishing-directory "~/git/kb-html"
      :section-numbers nil
      :with-toc t
      :recursive t
      )
     ("work-org"
      :base-directory "~/git/work-org"
      :publishing-function le/my-org-publish-to-html
      :publishing-directory "~/git/work-html"
      :section-numbers nil
      :with-toc t
      :recursive t
      )
     ("tshoot-org"
      :base-directory "~/git/tshoot-org"
      :publishing-function le/my-org-publish-to-html
      :publishing-directory "~/git/tshoot-html"
      :section-numbers nil
      :with-toc t
      :recursive t)))

  (setq org-modules
        '(org-habit
          org-bookmark
          org-eshell))

  (setq org-refile-targets '((nil :maxlevel . 1)
                             (org-agenda-files :maxlevel . 1)))

  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (makefile . t)
     (css . t)
     (eshell . t)
     (dot . t)
     (java . t)
     (js . t)
     (perl . t)
     (processing . t)
     (sql . t)
     (sqlite . t)
     (org . t)
     (shell . t)
     (C . t)
     (sed . t)))

  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :weight extrabold :height 1.25))))
   '(org-level-2 ((t (:inherit outline-2 :weight bold :height 1.1))))
   '(org-level-3 ((t (:inherit outline-3 :weight normal :height 1.1))))
   '(org-level-4 ((t (:inherit outline-4 :weight normal :height 1.0))))
   '(org-level-5 ((t (:inherit outline-5 :weight normal :height 1.0))))
   '(org-document-title ((t (:foreground "#82aaff" :weight extra-bold :height 1.3)))))

  (setq org-hidden-keywords '(author date title))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)) ;; org-mode ; end of "use-package org"

;; Show hidden emphasis markers
;; (use-package org-appear
;;   :hook (org-mode . org-appear-mode))

(require 'ox-publish)
;; Other org-mode setup

(use-package org-modern
 :ensure t)

(with-eval-after-load 'org (global-org-modern-mode))

(global-org-modern-mode)

(use-package org-superstar
  :ensure t
  :after org
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-remove-leading-stars t)
  (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

;; Org font settings
;; (set-face-attribute 'org-default nil :font "Iosevka Aile" :weight 'bold :height 1.5)

(use-package org-make-toc
  :ensure t
  :hook (org-mode . org-make-toc-mode))

(require 'ox-md)

(use-package org-projectile
 :ensure t
 :bind (("C-c n p" . org-projectile-project-todo-completing-read)
        ("C-c l" . org-store-link)
        ("C-c a" . org-agenda)
        ("C-c c" . org-capture))
 :config
 (progn
   (setq org-projectile-projects-file
         (expand-file-name "~/git/projects-org/project.org"))
   (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
   (push (org-projectile-project-todo-entry) org-capture-templates)))


(use-package magit
  :ensure t
  :config
  (defun magit-display-buffer-pop-up-frame (buffer)
    (if (with-current-buffer buffer (eq major-mode 'magit-status-mode))
        (display-buffer buffer
                        '((display-buffer-reuse-window
                           display-buffer-below-selected)
                          (reusable-frames . t)))
      (magit-display-buffer-traditional buffer)))
)

(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-indentation                     1
          treemacs-indentation-guide-mode          t
          treemacs-indentation-guide-style         'line
          treemacs-width-is-initially-locked       nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    (setq treemacs-resize-icons 12)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-nerd-icons
  :ensure t
  :after treemacs
  :config
  (treemacs-load-theme "nerd-icons")
  (treemacs-refresh))

;; UI
;; Configure doom-modeline
(use-package doom-modeline
  :ensure t
  :init (setq doom-modeline-support-imenu t)
  :after eshell
  :config (setq doom-modeline-icon t
                doom-modeline-major-mode-icon t
                doom-modeline-major-mode-color-icon t
                doom-modeline-buffer-state-icon t
                doom-modeline-buffer-modification-icon t
                doom-modeline-indent-info t
                doom-modeline-env-enable-python t
                doom-modeline-github t
                doom-modeline-modal t
                doom-modeline-modal-icon t
                doom-modeline-vcs-max-length 24
                doom-modeline-buffer-file-name-style 'truncate-with-project)
  :hook (after-init . doom-modeline-mode))

(use-package jinja2-mode
  :ensure t)

;; Configure doom-themes
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-material t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (doom-themes-treemacs-config)
  (doom-themes-org-config))

;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  (setq vertico-count 15)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize nil)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  )

(require 'vertico-posframe)
(vertico-posframe-mode 1)
(setq vertico-posframe-parameters
      '((left-fringe . 8)
        (right-fringe . 8)))

;; Enable vertico-multiform
(setq vertico-multiform-commands
      '((consult-projectile
         posframe
         (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
         (vertico-posframe-border-width . 7)
         (vertico-posframe-fallback-mode . vertico-buffer-mode))
        (consult-line
         posframe
         (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
         (vertico-posframe-border-width . 5)
         (vertico-posframe-fallback-mode . vertico-buffer-mode))
        (consult-grep
         posframe
         (vertico-posframe-poshandler . posframe-poshandler-frame-bottom-center)
         (vertico-posframe-border-width . 5)
         (vertico-posframe-fallback-mode . vertico-buffer-mode))
        (consult-ripgrep
         posframe
         (vertico-posframe-poshandler . posframe-poshandler-frame-bottom-center)
         (vertico-posframe-border-width . 5)
         (vertico-posframe-fallback-mode . vertico-buffer-mode))
        (consult-imenu
         posframe
         (vertico-posframe-poshandler . posframe-poshandler-frame-bottom-center)
         (vertico-posframe-border-width . 5)
         (vertico-posframe-fallback-mode . vertico-buffer-mode))
        (consult-bookmark
         posframe
         (vertico-posframe-poshandler . posframe-poshandler-frame-bottom-center)
         (vertico-posframe-border-width . 5)
         (vertico-posframe-fallback-mode . vertico-buffer-mode))
        (t posframe)
        (execute-extended-command unobtrusive)))
(setq vertico-multiform-categories
      '((file grid)))

(vertico-multiform-mode 1)

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  ;; (defun crm-indicator (args)
  ;;   (cons (format "[CRM,%s] %s"
  ;;                 (replace-regexp-in-string
  ;;                  "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
  ;;                  crm-separator)
  ;;                 (car args))
  ;;         (cdr args)))
  ;; (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(partial-completion substring initials flex orderless basic))
  (orderless-component-separator "[ //]+"))

;; (use-package consult-lsp
;;  :ensure t)

(use-package consult
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :bind
  ("M-y" . consult-yank-pop)
  :config
  (consult-customize
   consult-ripgrep consult-git-grep consult-grep)
  (setq
   consult-narrow-key "<"))
   ;;consult-find-args "find . "))

(defun le/centaur-tabs-buffer-groups ()
  "`centaur-tabs-buffer-groups' control buffers' group rules.

Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
All buffer name start with * will group to \"Emacs\".
Other buffer group by `centaur-tabs-get-group-name' with project name."
  (list
   (cond
    ((or (string-equal "*" (substring (buffer-name) 0 1))
         (memq major-mode '(magit-process-mode
                            magit-status-mode
                            magit-diff-mode
                            magit-log-mode
                            magit-file-mode
                            magit-blob-mode
                            magit-blame-mode
                            )))
     "Emacs")
    ((derived-mode-p 'prog-mode)
     "Editing")
    ((derived-mode-p 'dired-mode)
     "Dired")
    ((memq major-mode '(helpful-mode
                        help-mode))
     "Help")
    ((memq major-mode '(org-mode
                        org-agenda-clockreport-mode
                        org-src-mode
                        org-agenda-mode
                        org-beamer-mode
                        org-indent-mode
                        org-bullets-mode
                        org-cdlatex-mode
                        org-agenda-log-mode
                        diary-mode))
     "OrgMode")
    (t
     (centaur-tabs-get-group-name (current-buffer))))))

(use-package centaur-tabs
  :ensure t
  :demand
  :hook
  (centaur-tabs-mode . le/centaur-tabs-buffer-groups)
  :config
  (defun le/my-centaur-tabs-icon-for-ansi-term (original-fn mode &rest args)
    "Change the face of the icon when MODE is 'ansi-term."
    (let ((new-args (if (eq mode 'term-mode)
                        (plist-put args :face 'all-the-icons-purple)
                      args)))
      (apply original-fn mode new-args)))
  (advice-add 'centaur-tabs--icon-for-mode :around #'le/my-centaur-tabs-icon-for-ansi-term)
  (setq centaur-tabs-set-modified-marker t
        centaur-tabs-modified-marker "~"
        centaur-tabs-set-icons t
        ;; centaur-tabs-plain-icons t
        centaur-tabs-gray-out-icons 'buffer
        centaur-tabs-set-bar 'over
        x-underline-at-descent-line t
        centaur-tabs-projectile-buffer-group-calc t
        centaur-tabs-style "bar"
        centaur-tabs-height 22
        centaur-tabs-set-close-button nil
        centaur-tabs-label-fixed-length 14)
  (centaur-tabs-mode t)

  :bind
  ("s-t" . centaur-tabs--create-new-tab)
  ("s-}" . centaur-tabs-forward)
  ("s-{" . centaur-tabs-backward))

(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))

(use-package company
  :hook (after-init . global-company-mode)
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0)
  (setq company-global-modes '(not text-mode fundamental-mode))
  )

;; Set company mode for all modes exect for a few modes listed below
(setq company-global-modes '(not text-mode))

(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode)
  :config (setq company-box-doc-enable t))

(company-quickhelp-mode)

;; (require 'tree-sitter)
;; (require 'tree-sitter-langs)

(use-package lsp-mode
  :ensure t
  :hook ((terraform-mode . lsp-deferred))
  :config (setq lsp-enable-links t
                read-process-output-max (* 4096 4096)
                lsp-use-plists t
                lsp-log-io nil
                lsp-semantic-tokens-enable t
                lsp-semantic-tokens-honor-refresh-requests t
                lsp-disabled-clients '(tfls)
                lsp-terraform-ls-enable-show-reference t
                lsp-terraform-ls-prefill-required-fields t
                lsp-enable-links t
                lsp-semantic-tokens-enable t
                lsp-semantic-tokens-honor-refresh-requests t
                lsp-ansible-add-on t
                lsp-enable-symbol-highlighting t
                lsp-groovy-server-file
                (concat (getenv "HOME") "/.emacs.d/.cache/lsp/groovy-language-server-all.jar")
                lsp-groovy-classpath
                (concat (getenv "HOME") "/groovy-language-server/build/libs"))
  :commands (lsp lsp-deferred))

(use-package lsp-ui
  :commands lsp-ui-mode
  :ensure t
  :config (setq lsp-ui-sideline-show-diagnostics t
                lsp-ui-sideline-show-hover t
                lsp-ui-sideline-show-code-actions t
                lsp-ui-sideline-update-mode 'line
                lsp-ui-peek-enable t
                lsp-ui-peek-show-directory t
                lsp-ui-doc-enable t
                lsp-ui-doc-delay 2
                lsp-ui-doc-show-with-cursor t
                lsp-ui-doc-position 'top))

(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-defferred))))

(use-package dashboard
  :ensure t
  :config (dashboard-setup-startup-hook)
          (setq dashboard-display-icons-p t
                dashboard-icon-type 'nerd-icons
                dashboard-startup-banner 'logo))

(use-package which-key
  :ensure t
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 3))

(defun le/emojify-setup ()
  "Setup emojify on hook execution."
  (global-emojify-mode)
  (company-emoji-init))

(use-package emojify
  :ensure t
  :hook (after-init . le/emojify-setup)
  ;; :init
  ;; (add-hook 'after-init-hook 'le/emojify-setup)
  :config (setq emojify-display-style 'unicode))

(defun le/enable-company-emoji ()
  "Add company-emoji backend to company-backends."
  (interactive)
  (unless (member 'company-emoji company-backends)
    (setq company-backends (push 'company-emoji company-backends))
    (message "company-emoji backend enabled.")))

(defun le/disable-company-emoji ()
  "Remove company-emoji backend from company-backends."
  (interactive)
  (when (member 'company-emoji company-backends)
    (setq company-backends (remove 'company-emoji company-backends))
    (message "company-emoji backend disabled.")))

(use-package company-emoji
  :ensure t)

(use-package origami
  :ensure t
  :hook (yaml-mode . origami-mode))

(use-package helpful
  :ensure t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key))

(use-package bats-mode
  :ensure t)

(use-package edit-server
  :ensure t
  :if window-system
  :commands edit-server-start
  :init (if after-init-time
              (edit-server-start)
            (add-hook 'after-init-hook
                      #'(lambda() (edit-server-start))))
  :config (setq edit-server-new-frame-alist
                '((name . "Edit with Emacs FRAME")
                  (top . 200)
                  (left . 200)
                  (width . 80)
                  (height . 25)
                  (minibuffer . t)
                  (menu-bar-lines . t)
                  (window-system . x))))

(use-package dockerfile-mode
  :ensure t
  :defer 2
  :mode
  ("Dockerfile\\'" . dockerfile-mode))

(use-package vterm
  :ensure t
  :hook (vterm-mode-hook eterm-256color-mode))

(use-package k8s-mode
  :ensure t
  :defer t
  :commands (k8s-mode))

(put 'narrow-to-region 'disabled nil)
(provide 'emacs)
;;; emacs ends here
