;-*-emacs-lisp-*-
;; My Emacs configuration
;; Author: Alistair Y. Lewars

(when (string-equal system-type "darwin")
  ;; TODO(lewars): This is needed to overcome a bug with Emacs <29,
  ;; running on MacOs >=13. Remove when upgrading Emacs 29.
  (setq image-types (cons 'svg image-types)))

(when (string-equal system-type "gnu/linux")
  (setq ispell-program-name "aspell"))

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

(require 'use-package)
(require 'quelpa-use-package)

;; Misc configs
(setq-default indent-tabs-mode nil)

(defun my-c-mode-hook ()
  (setq indent-tabs-mode nil))

(add-hook 'c-mode-hook 'my-c-mode-hook)
(set-scroll-bar-mode nil)
(tool-bar-mode -1)
(menu-bar-mode -1)

(if (display-graphic-p)
    '(server-mode t))

(defun text-mode-init ()
  (visual-line-mode 1)
  (toggle-word-wrap 1))
(add-hook 'text-mode-hook 'text-mode-init)
(add-hook 'org-mode-hook 'text-mode-init)

(global-set-key "\C-cw" 'whitespace-mode)
(when (fboundp 'windmove-default-keybindings)
      (windmove-default-keybindings))
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)
(global-set-key (read-kbd-macro "C-x f") 'find-file-at-point)

(setq inhibit-startup-screen t)
(setq display-time-day-and-date t)
(display-time-mode t)
(setq fill-column 79)
(setq auto-fill-mode t)

(setq mouse-wheel-scroll-amount '(0.01))
(fido-vertical-mode t)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-matching-paren t)
 '(column-number-mode 1)
 '(display-fill-column-indicator-column 120)
 '(frame-background-mode nil)
 '(highlight-indent-guides-method 'bitmap)
 '(imenu-auto-rescan t)
 '(package-selected-packages
   '(fzf dumb-jump flycheck-posframe flycheck-grammarly json-navigator json-mode pyenv-mode pyvenv-auto nerd-icons python-mode org-projectile groovy-mode imenu-anywhere imenu-list yaml-mode windresize vterm vertico-posframe treemacs-projectile treemacs-persp treemacs-nerd-icons treemacs-magit treemacs-icons-dired treemacs-all-the-icons terraform-mode terraform-doc quelpa-use-package python-black orderless multiple-cursors markdown-mode jedi iedit icomplete-vertical highlight-indent-guides helm-gtags go-mode git-modes ghub flyspell-correct-helm flymd flymake-yamllint flymake-shell flymake-python-pyflakes flymake-json flymake-grammarly flymake-gradle flymake-golangci flymake-go-staticcheck flymake-go flycheck-yamllint flycheck-color-mode-line flycheck-aspell find-file-in-project embark-consult elpy doom-themes doom-modeline dockerfile-mode corfu copilot)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:height 125 :foundry "ADBO" :family "Source Code Pro"))))
 '(ansi-color-bright-black ((t (:background "#222D32" :foreground "dark gray"))))
 '(completions-common-part ((t (:foreground "#b7ff9a" :underline t :height 1.128))))
 '(completions-first-difference ((t (:foreground "white" :weight bold :height 1.128))))
 '(copilot-overlay-face ((t (:foreground "pale violet red"))))
 '(cursor ((t (:background "#c792ea"))))
 '(custom-comment ((t (:background "#171F24" :foreground "#EEFFFF"))))
 '(custom-comment-tag ((t (:foreground "dark gray"))))
 '(font-lock-comment-delimiter-face ((t (:inherit font-lock-comment-face :foreground "light gray"))))
 '(font-lock-comment-face ((t (:foreground "gray"))))
 '(highlight ((t (:background "#c792ea" :foreground "#171F24"))))
 '(icomplete-selected-match ((t (:background "#a383b5"))))
 '(ido-only-match ((t (:foreground "SpringGreen3"))))
 '(line-number ((t (:foreground "gray"))))
 '(line-number-current-line ((t (:foreground "white"))))
 '(mode-line-inactive ((t (:background "#304047" :foreground "#70828A" :box nil))))
 '(org-headline-done ((t (:foreground "gray"))))
 '(org-hide ((t (:foreground "dim gray"))))
 '(region ((t (:extend t :background "IndianRed4"))))
 '(shadow ((t (:foreground "rosy brown"))))
 '(show-paren-match ((t (:background "dim gray" :foreground "cyan" :weight ultra-bold))))
 '(vertical-border ((t (:background "dark slate gray" :foreground "dark slate gray")))))

;; Misc
(use-package all-the-icons
  :if (display-graphic-p)
  :ensure t)

;; ========== Developer configurations ===========
(use-package fzf
  :bind
    ;; Don't forget to set keybinds!
  :config
  (setq fzf/args "-x --print-query --margin=1,0 --no-hscroll"
        fzf/executable "fzf"
        fzf/git-grep-args "-i --line-number %s"
        ;; command used for `fzf-grep-*` functions
        ;; example usage for ripgrep:
        ;; fzf/grep-command "rg --no-heading -nH"
        fzf/grep-command "grep -nrH"
        ;; If nil, the fzf buffer will appear at the top of the window
        fzf/position-bottom t
        fzf/window-height 15))

(use-package dumb-jump
  :ensure t)
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)

(use-package rg
  :ensure t)
(rg-enable-default-bindings)

(add-hook 'prog-mode-hook 'outline-minor-mode)
(add-hook 'prog-mode-hook 'hs-minor-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)

(add-hook 'prod-mode-hook (lambda () (setq-local hl-line-mode t)))

(use-package highlight-indent-guides
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))

(use-package text-mode
  :config
  (add-hook 'text-mode-hook #'hl-line-mode))

(use-package highlight-symbol
  :config
  (setf highlight-symbol-idle-delay 0)
  (add-hook 'prog-mode-hook 'highlight-symbol-mode)
  :bind (("M-s" . highlight-symbol-at-point)
         ("M-S" . highlight-symbol-remove-all)))

(use-package multiple-cursors
  :ensure t
  :bind (("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
	 ("C-c C-<" . mc/mark-all-like-this)
         ("C-c C-/" . mc/mark-all-dwim)))

(use-package imenu-list
  :ensure t
  :bind ("C-." . imenu-list-minor-mode)
  :config
  (setq imenu-list-focus-after-activation nil))
(global-set-key (kbd "C-'") #'imenu-list-smart-toggle)


(use-package imenu-anywhere
  :ensure t
  :bind (("C-." . ido-imenu-anywhere)))

(use-package bicycle
  :after outline
  :bind (:map outline-minor-mode-map
              ([C-tab] . bicycle-cycle)
              ([S-tab] . bicycle-cycle-global)))

(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))

(use-package json
  :ensure t
  :config
  (add-hook 'json-mode-hook 'json-mode))
  
;; ======= Language configuration ============
(add-to-list `auto-mode-alist '("\\.svg\\'" . nxml-mode))

(use-package python-mode
  :ensure t)

(use-package pyvenv-auto
  :hook ((python-mode . pyvenv-auto-run)))

(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode t)

  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))

(use-package groovy-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.gy$" . groovy-mode))
  :config
  (setf (alist-get "Jenkinsfile$" auto-mode-alist) 'groovy-mode))

(use-package yaml-mode
  :ensure t
  :config
  (defun frmt-yaml ()
    "Reformat YAML file with yq."
    (when (eq major-mode 'yaml-mode)
      (shell-command-to-string (format "yq e -P -i -v %s" buffer-file-name))
      (auto-revert-mode)))
  (add-hook 'after-save-hook 'frmt-yaml)
  (add-hook 'yaml-mode-hook 'highlight-indent-guides-mode))

(use-package terraform-mode
  :ensure t
  :config
  (defun frmt-hcl ()
    "Reformat HCL file with terraform fmt."
    (when (eq major-mode 'terraform-mode)
      (shell-command-to-string (format "terraform fmt %s" buffer-file-name))
      (auto-revert-mode)))
  (add-hook 'after-save-hook 'frmt-hcl)
  (add-hook 'terraform-mode-hook #'outline-minor-mode))

(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

;; Linters
(use-package python-black
  :demand t
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))

(with-eval-after-load 'flycheck
  (flycheck-grammarly-setup))

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
  :bind (("M-p" . flycheck-next-error)
         ("M-n" . flycheck-previous-error))
  :config (setq-default flycheck-disabled-checkers '(emacs-lisp)))

(use-package flycheck-posframe
  :ensure t
  :after flycheck
  :config
  (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode)
  (flycheck-posframe-configure-pretty-defaults)
  (setq flycheck-posframe-warning-prefix "\u26a0 "))

;; Productivity
(use-package copilot
  :quelpa (copilot :fetcher github
                   :repo "zerolfx/copilot.el"
                   :branch "main"
                   :files ("dist" "*.el")
                   :config (setq copilot-idle-delay 1))
  :ensure t
;;  :hook (prog-mode . copilot-mode)
  :bind (("C-c M-f" . copilot-complete)
         :map copilot-completion-map
         ("C-g" . copilot-clear-overlay)
         ("M-p" . copilot-previous-completion)
         ("M-n" . copilot-next-completion)
         ("<tab>" . copilot-accept-completion)
         ("M-f" . copilot-accept-completion-by-word)
         ("M-<return>" . copilot-accept-completion-by-line)))

;; ibuffer
(use-package ibuffer
  :bind ("C-x C-b" . 'ibuffer)
  :custom
  (ibuffer-default-display-maybe-show-predicates t)
  (ibuffer-expert t)
  (ibuffer-saved-filter-groups
   '(("default"
      ("Magit"
       (or
        (mode . magit-status-mode)
        (mode . magit-log-mode)
        (name . "\\*magit")
        (name . "magit-")
        (name . "git-monitor")))
      ("Commands"
       (or
        (mode . shell-mode)
        (mode . ansi-mode)
        (mode . eshell-mode)
        (mode . term-mode)
        (mode . compilation-mode)))
      ("Rust"
       (or
        (mode . rust-mode)
        (mode . cargo-mode)
        (name . "\\*Cargo")
        (name . "^\\*rls\\(::stderr\\)?\\*")
        (name . "eglot")))
      ("C++"
       (or
        (mode . c-mode)
        (mode . c++-mode)))
      ("Lisp"
       (mode . emacs-lisp-mode))
      ("Dired"
       (mode . dired-mode))
      ("Gnus"
       (or
        (mode . message-mode)
        (mode . mail-mode)
        (mode . gnus-group-mode)
        (mode . gnus-summary-mode)
        (mode . gnus-article-mode)
        (name . "^\\.newsrc-dribble")
        (name . "^\\*\\(sent\\|unsent\\|fetch\\)")
        (name . "^ \\*\\(nnimap\\|nntp\\|nnmail\\|gnus\\|server\\|mm\\*\\)")
        (name . "\\(Original Article\\|canonical address\\|extract address\\)")))
      ("Org"
       (or
        (name . "^\\*Calendar\\*$")
        (name . "^\\*Org Agenda")
        (name . "^ \\*Agenda")
        (name . "^diary$")
        (mode . org-mode)))
      ("Perl"
       (or
        (mode . cperl-mode)
        (mode . perl-mode)))
      ("Python"
       (mode . python-mode))
      ("Terraform"
       (or
        (mode . terraform-mode)
	(name . "^\\.tf")
	(name . "^\\.tfvars")))
      ("Go"
       (or
        (mode . go-mode)
        (name . "^\\.go")))
      ("Groovy"
       (or
        (mode . groovy-mode)
        (name . "^\\.groovy")))
      ("Yaml"
       (or
        (mode . yaml-mode)
        (name . "^\\.yaml")
        (name . "^\\.yml")))
      ("JSON"
       (or
        (mode . json-mode)
        (name . "^\\.json")))
      ("Markdown"
       (or
        (mode . markdown-mode)
        (name . "^\\.md")))
      ("Emacs"
       (or
        (name . "^\\*scratch\\*$")
        (name . "^\\*Messages\\*$")
        (name . "^\\*\\(Customize\\|Help\\)")
        (name . "\\*\\(Echo\\|Minibuf\\)"))))))
  (ibuffer-show-empty-filter-groups nil)
  (ibuffer-shrink-to-minimum-size t t)
  (ibuffer-use-other-window t)
  :init
  (add-hook 'ibuffer-mode-hook
            #'(lambda ()
                (ibuffer-switch-to-saved-filter-groups "default"))))

;; (use-package ibuffer-git
;;   :ensure t
;;   :after ibuffer
;;   :bind (:map ibuffer-mode-map
;;               ("M-g" . ibuffer-git-filter-by-name)))

(use-package org
  :ensure t
  :mode (("\\.org$" . org-mode)))


(use-package org-projectile
  :ensure t
  :bind (("C-c n p" . org-projectile-project-todo-completing-read)
         ("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture))
  :config
  (progn
    (setq org-projectile-projects-file (concat (getenv "HOME") "/git/proj.orgs"))
    (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
    (push (org-projectile-project-todo-entry) org-capture-templates))
  :ensure t)

(use-package magit
    :ensure t
)

(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

;; UI
;; Configure doom-modeline
(use-package doom-modeline
  :init (setq doom-modeline-support-imenu t)
  :config (setq doom-modeline-icon t
                doom-modeline-major-mode-icon t
                doom-modeline-major-mode-color-icon t
                doom-modeline-buffer-state-icon t
                doom-modeline-buffer-modification-icon t
                doom-modeline-indent-info t
                doom-modeline-env-enable-python t
                doom-modeline-github t
                doom-modeline-modal t
                doom-modeline-modal-icon t)
  :ensure t
  :hook (after-init . doom-modeline-mode))
(add-hook 'after-init-hook #'doom-modeline-mode)

;; Configure doom-themes
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-material t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom")
  (doom-themes-treemacs-config)
  (doom-themes-org-config))

