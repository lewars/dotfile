;;; .emacs --- Emacs initalization file -*- mode: emacs-lisp; lexical-binding: t; -*-

;; Copyright (C) 1996-2023 Alistair Y. Lewars

;; Author: Alistair Y. Lewars

;;; Commentary:
;;

;;; Code:

(when (string-equal system-type "darwin")
  ;; TODO(lewars): This is needed to overcome a bug with Emacs <29,
  ;; running on MacOs >=13. Remove when upgrading Emacs 29.
  (setq image-types (cons 'svg image-types)))

(when (string-equal system-type "gnu/linux")
  (setq ispell-program-name "aspell"))

(if (string-equal system-type "gnu/linux")
    (setq my-default-font-height 100)
    (setq my-default-font-height 125))

(set-face-attribute 'default nil :height my-default-font-height :foundry "ADBO" :family "Source Code Pro")

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

(require 'use-package)
(require 'quelpa-use-package)

;; Misc configs
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(run-at-time nil (* 5 60) 'recentf-save-list)

(global-set-key "\C-x\ \C-r" 'fzf-recentf)
(global-set-key "\C-x\ \C-y" 'find-file-read-only)

(setq-default indent-tabs-mode nil)

(defun my-c-mode-hook ()
  "This hook define hooks for 'c-mode'."
  (setq indent-tabs-mode nil))

(add-hook 'c-mode-hook 'my-c-mode-hook)
(set-scroll-bar-mode nil)
(tool-bar-mode -1)
(menu-bar-mode -1)

(if (display-graphic-p)
    '(server-mode t))

(defun text-mode-init ()
  "This hook define hooks for 'text-mode'."
  (visual-line-mode 1)
  (toggle-word-wrap 1))
(add-hook 'text-mode-hook 'text-mode-init)
(add-hook 'org-mode-hook 'text-mode-init)

(defun my-whitespace-mode-hook ()
  "This hook define hooks for text and prog modes."
 (setq show-trailing-whitespace t))
(add-hook 'prog-mode-hook 'my-whitespace-mode-hook)
(add-hook 'text-mode-hook 'my-whitespace-mode-hook)

(global-set-key "\C-cw" 'whitespace-mode)
(when (fboundp 'windmove-default-keybindings)
      (windmove-default-keybindings))
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)
(global-set-key (read-kbd-macro "C-x f") 'find-file-at-point)

;; Setup keybinding for eww
(defun my-eww-config ()
    "For use in `eww-mode-hook'."
    (local-set-key (kbd "^") #'eww-back-url)
    ;; more here
    )

(when (fboundp 'eww-mode)
  (add-hook 'eww-mode-hook 'my-eww-config))

;; Make windmove work in Org mode:
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)

(setq inhibit-startup-screen t)
(setq display-time-day-and-date t)
(display-time-mode t)
(setq fill-column 79)
(setq auto-fill-mode t)

(setq mouse-wheel-scroll-amount '(0.01))
(setq read-buffer-completion-ignore-case t)
(setq read-file-name-completion-ignore-case t)
(setq completion-cycle-threshold t)

(add-hook 'prog-mode-hook 'outline-minor-mode)
(add-hook 'prog-mode-hook 'hs-minor-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
(add-hook 'prod-mode-hook (lambda () (setq-local hl-line-mode t)))

(require 'yasnippet)
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
(setq yas-wrap-around-region t)

(yas-global-mode 1)
;; (yas-reload-all)
;; (add-hook 'prog-mode-hook #'yas-minor-mode)

(global-set-key "\M-/" 'hippie-expand)
(add-to-list 'hippie-expand-try-functions-list 'yas-hippie-try-expand)

(add-to-list 'display-buffer-alist
             '("*Help*" display-buffer-same-window))

;; Configure EAF browser
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-application-framework/")
;; (require 'eaf)
;; (require 'eaf-browser)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-matching-paren t)
 '(column-number-mode 1)
 '(display-fill-column-indicator-column 120)
 '(frame-background-mode nil)
 '(highlight-indent-guides-method 'bitmap)
 '(imenu-auto-rescan t)
 '(magit-bury-buffer-function 'magit-restore-window-configuration)
 '(package-selected-packages
   '(lsp-python-ms lsp-ui lsp-mode marginalia centaur-tabs bazel jinja2-mode highlight-symbol org-modern color-theme consult-projectile consult-flycheck direx fzf dumb-jump flycheck-posframe flycheck-grammarly json-navigator json-mode pyenv-mode pyvenv-auto nerd-icons python-mode org-projectile groovy-mode imenu-anywhere imenu-list yaml-mode windresize vterm vertico-posframe treemacs-projectile treemacs-persp treemacs-nerd-icons treemacs-magit treemacs-icons-dired treemacs-all-the-icons terraform-mode terraform-doc quelpa-use-package python-black orderless multiple-cursors markdown-mode jedi iedit icomplete-vertical highlight-indent-guides helm-gtags go-mode git-modes ghub flyspell-correct-helm flymd flymake-yamllint flymake-shell flymake-python-pyflakes flymake-json flymake-grammarly flymake-gradle flymake-golangci flymake-go-staticcheck flymake-go flycheck-yamllint flycheck-color-mode-line flycheck-aspell find-file-in-project embark-consult elpy doom-themes doom-modeline dockerfile-mode corfu copilot)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-bright-black ((t (:background "#222D32" :foreground "dark gray"))))
 '(copilot-overlay-face ((t (:foreground "pale violet red"))))
 '(cursor ((t (:background "#c792ea"))))
 '(custom-comment ((t (:background "#171F24" :foreground "#EEFFFF"))))
 '(custom-comment-tag ((t (:foreground "dark gray"))))
 '(doom-themes-treemacs-root-face ((t (:inherit font-lock-string-face :height 0.85))))
 '(font-lock-comment-delimiter-face ((t (:inherit font-lock-comment-face :foreground "light gray"))))
 '(font-lock-comment-face ((t (:foreground "gray"))))
 '(highlight ((t (:background "#c792ea" :foreground "#7d7c8a"))))
 '(ido-only-match ((t (:foreground "SpringGreen3"))))
 '(line-number ((t (:foreground "gray"))))
 '(line-number-current-line ((t (:foreground "white"))))
 '(mode-line ((t (:background "#1a2427" :foreground "#8396ac" :box nil))))
 '(mode-line-inactive ((t (:background "#394c55" :foreground "#8396ac" :box nil))))
 '(org-agenda-dimmed-todo-face ((t (:foreground "dark gray"))))
 '(org-block-begin-line ((t (:inherit org-block :extend t :background "#222D32" :foreground "SlateGray3"))))
 '(org-drawer ((t (:foreground "SlateGray3"))))
 '(org-ellipsis ((t (:foreground "light green" :underline nil))))
 '(org-headline-done ((t (:foreground "gray"))))
 '(org-hide ((t (:foreground "gray60"))))
 '(org-meta-line ((t (:foreground "SlateGray3"))))
 '(org-modern-block-name ((t (:weight semi-light :height 0.8))))
 '(org-property-value ((t (:foreground "SlateGray3"))) t)
 '(org-scheduled-today ((t (:foreground "dark gray"))))
 '(org-special-keyword ((t (:foreground "SlateGray3"))))
 '(org-tag ((t (:foreground "cyan3" :weight normal))))
 '(org-time-grid ((t (:foreground "gray80"))))
 '(org-upcoming-distant-deadline ((t (:foreground "red1"))))
 '(region ((t (:extend t :background "IndianRed4"))))
 '(shadow ((t (:foreground "rosy brown"))))
 '(show-paren-match ((t (:background "dim gray" :foreground "cyan" :weight ultra-bold))))
 '(treemacs-root-face ((t (:inherit font-lock-string-face :weight bold :height 1.0))))
 '(vertical-border ((t (:background "#1a2427" :foreground "#1a2427")))))

;; Misc
(use-package all-the-icons
  :if (display-graphic-p))
(use-package nerd-icons
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  )

;; ========== Developer configurations ===========
(use-package fzf
  :bind
    ;; TODO(slams): set keybinds
  :config
  (setq fzf/args "-x --print-query --margin=1,0 --no-hscroll"
        fzf/executable "fzf"
        fzf/git-grep-args "-i --line-number %s"
        ;; command used for `fzf-grep-*` functions
        ;; example usage for ripgrep:
        fzf/grep-command "rg --no-heading -nH"
        ;; fzf/grep-command "grep -nrH"
        ;; If nil, the fzf buffer will appear at the top of the window
        fzf/position-bottom t
        fzf/window-height 15))

(use-package dumb-jump
  :ensure t)
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)

(use-package rg
  :ensure t)
(rg-enable-default-bindings)

(use-package highlight-indent-guides
  :ensure t
  :config
  (setq highlight-indent-guides-mode t)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))

(use-package text-mode
  :config
  (add-hook 'text-mode-hook #'hl-line-mode))

(use-package highlight-symbol
  :config
  (setf highlight-symbol-idle-delay 0)
  (add-hook 'prog-mode-hook 'highlight-symbol-mode)
  :bind (("M-s" . highlight-symbol-at-point)
         ("M-S" . highlight-symbol-remove-all)))

(use-package multiple-cursors
  :ensure t
  :bind (("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
	 ("C-c C-<" . mc/mark-all-like-this)
         ("C-c C-/" . mc/mark-all-dwim)))

(use-package imenu-list
  :ensure t
  :bind ("C-." . imenu-list-minor-mode)
  :config
  (setq imenu-list-focus-after-activation nil))
(global-set-key (kbd "C-'") #'imenu-list-smart-toggle)


(use-package imenu-anywhere
  :ensure t
  :bind (("C-." . ido-imenu-anywhere)))

(use-package bicycle
  :after outline
  :bind (:map outline-minor-mode-map
              ([C-tab] . bicycle-cycle)
              ([S-tab] . bicycle-cycle-global)))

(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package org-projectile
  :bind (("C-c n p" . org-projectile-project-todo-completing-read)
         ("C-c c" . org-capture))
  :config
  (progn
    (setq org-projectile-projects-file
          (expand-file-name "~/git/projects-org"))
    (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
    (push (org-projectile-project-todo-entry) org-capture-templates))
  :ensure t)

(use-package json
  :ensure t
  :config
  (add-hook 'json-mode-hook 'json-mode)
  (add-hook 'json-mode-hook 'outline-minor-mode)
  (add-hook 'json-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'json-mode-hook 'hs-minor-mode)
  (add-hook 'json-mode-hook 'display-line-numbers-mode)
  (add-hook 'json-mode-hook 'display-fill-column-indicator-mode))


;; ======= Language configuration ============
(add-to-list `auto-mode-alist '("\\.svg\\'" . nxml-mode))

(use-package python-mode
  :ensure t)

(use-package pyvenv-auto
  :hook ((python-mode . pyvenv-auto-run)))

(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode t)

  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))

(use-package groovy-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.gvy$" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.gy$" . groovy-mode))
  :config
  (setf (alist-get "Jenkinsfile.+$" auto-mode-alist) 'groovy-mode))

(use-package yaml-mode
  :ensure t
  :config
  (defun frmt-yaml ()
    "Reformat YAML file with yq."
    (when (eq major-mode 'yaml-mode)
      (shell-command-to-string (format "yq e -P -i -v %s" buffer-file-name))
      (auto-revert-mode)))
  (add-hook 'after-save-hook 'frmt-yaml)
  (add-hook 'yaml-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'yaml-mode-hook 'outline-minor-mode)
  (add-hook 'yaml-mode-hook 'hs-minor-mode)
  (add-hook 'yaml-mode-hook 'display-line-numbers-mode)
  (add-hook 'yaml-mode-hook 'display-fill-column-indicator-mode))

(use-package terraform-mode
  :ensure t
  :config
  (defun frmt-hcl ()
    "Reformat HCL file with terraform fmt."
    (when (eq major-mode 'terraform-mode)
      (shell-command-to-string (format "terraform fmt %s" buffer-file-name))
      (auto-revert-mode)))
  (add-hook 'after-save-hook 'frmt-hcl)
  (add-hook 'terraform-mode-hook 'outline-minor-mode)
  (add-hook 'terraform-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'terraform-mode-hook 'hs-minor-mode)
  (add-hook 'terraform-mode-hook 'display-line-numbers-mode)
  (add-hook 'terraform-mode-hook 'display-fill-column-indicator-mode))

(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  :config
  (add-hook 'markdown-mode-hook 'outline-minor-mode)
  (add-hook 'markdown-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'markdown-mode-hook 'hs-minor-mode)
  (add-hook 'markdown-mode-hook 'display-line-numbers-mode)
  (add-hook 'markdown-mode-hook 'display-fill-column-indicator-mode))


;; Linters
(use-package python-black
  :demand t
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))

(with-eval-after-load 'flycheck
  (flycheck-grammarly-setup))
(setq flycheck-grammarly-check-time 0.8)

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
  :bind (("M-n" . flycheck-next-error)
         ("M-p" . flycheck-previous-error))
  :config (setq-default flycheck-disabled-checkers '(emacs-lisp)))

;; (use-package flycheck-posframe
;;   :ensure t
;;   :after flycheck
;;   :config
;;   (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode)
;;   (flycheck-posframe-configure-pretty-defaults)
;;   (setq flycheck-posframe-warning-prefix "\u26a0 "))

;; Productivity
(use-package copilot
  :quelpa (copilot :fetcher github
                   :repo "zerolfx/copilot.el"
                   :branch "main"
                   :files ("dist" "*.el")
                   :config (setq copilot-idle-delay 6))
  :ensure t
;;  :hook (prog-mode . copilot-mode)
  :bind (("M-\\" . copilot-complete)
         :map copilot-completion-map
         ("C-g" . copilot-clear-overlay)
         ("esc" . copilot-clear-overlay)
         ("C-p" . copilot-previous-completion)
         ("C-n" . copilot-next-completion)
         ("<tab>" . copilot-accept-completion)
         ("[tab]" . copilot-accept-completion)
         ("RET" . copilot-accept-completion)
         ("SPC" . copilot-accept-completion)
         ("C-w" . copilot-accept-completion-by-word)
         ("C-l" . copilot-accept-completion-by-line)))

;; ibuffer
(use-package ibuffer
  :bind ("C-x C-b" . 'ibuffer)
  :custom
  (ibuffer-default-display-maybe-show-predicates t)
  (ibuffer-expert t)
  (ibuffer-saved-filter-groups
   '(("default"
      ("Magit"
       (or
        (mode . magit-status-mode)
        (mode . magit-log-mode)
        (name . "\\*magit")
        (name . "magit-")
        (name . "git-monitor")))
      ("Commands"
       (or
        (mode . shell-mode)
        (mode . ansi-mode)
        (mode . eshell-mode)
        (mode . term-mode)
        (mode . compilation-mode)))
      ("Rust"
       (or
        (mode . rust-mode)
        (mode . cargo-mode)
        (name . "\\*Cargo")
        (name . "^\\*rls\\(::stderr\\)?\\*")
        (name . "eglot")))
      ("C++"
       (or
        (mode . c-mode)
        (mode . c++-mode)))
      ("Lisp"
       (mode . emacs-lisp-mode))
      ("Dired"
       (mode . dired-mode))
      ("Gnus"
       (or
        (mode . message-mode)
        (mode . mail-mode)
        (mode . gnus-group-mode)
        (mode . gnus-summary-mode)
        (mode . gnus-article-mode)
        (name . "^\\.newsrc-dribble")
        (name . "^\\*\\(sent\\|unsent\\|fetch\\)")
        (name . "^ \\*\\(nnimap\\|nntp\\|nnmail\\|gnus\\|server\\|mm\\*\\)")
        (name . "\\(Original Article\\|canonical address\\|extract address\\)")))
      ("Org"
       (or
        (name . "^\\*Calendar\\*$")
        (name . "^\\*Org Agenda")
        (name . "^ \\*Agenda")
        (name . "^diary$")
        (mode . org-mode)))
      ("Perl"
       (or
        (mode . cperl-mode)
        (mode . perl-mode)))
      ("Python"
       (mode . python-mode))
      ("Terraform"
       (or
        (mode . terraform-mode)
	(name . "^\\.tf")
	(name . "^\\.tfvars")))
      ("Go"
       (or
        (mode . go-mode)
        (name . "^\\.go")))
      ("Groovy"
       (or
        (mode . groovy-mode)
        (name . "^\\.groovy")
        (name . "^\\.gy")
        (name . "^\\.gvy")))
      ("Yaml"
       (or
        (mode . yaml-mode)
        (name . "^\\.yaml")
        (name . "^\\.yml")))
      ("JSON"
       (or
        (mode . json-mode)
        (name . "^\\.json")))
      ("Markdown"
       (or
        (mode . markdown-mode)
        (name . "^\\.md")))
      ("Emacs"
       (or
        (name . "^\\*scratch\\*$")
        (name . "^\\*Messages\\*$")
        (name . "^\\*\\(Customize\\|Help\\)")
        (name . "\\*\\(Echo\\|Minibuf\\)"))))))
  (ibuffer-show-empty-filter-groups nil)
  (ibuffer-shrink-to-minimum-size t t)
  (ibuffer-use-other-window nil)
  :init
  (add-hook 'ibuffer-mode-hook
            #'(lambda ()
                (ibuffer-switch-to-saved-filter-groups "default"))))

;; (use-package ibuffer-git
;;   :ensure t
;;   :after ibuffer
;;   :bind (:map ibuffer-mode-map
;;               ("M-g" . ibuffer-git-filter-by-name)))

(use-package org
  :init (setq  org-replace-disputed-keys t)
  :ensure t
  :mode (("\\.org$" . org-mode))
  ;; :bind (("s-<down>" . org-shiftdown)
  ;;        ("s-<up>" . org-shiftup)
  ;;        ("s-<left>" . org-shiftleft)
  ;;        ("s-<right>" . org-shiftright))
  )

(setq
 ;; Edit settings
 org-auto-align-tags nil
 org-tags-column 0
 org-catch-invisible-edits 'show-and-error
 org-special-ctrl-a/e t
 org-insert-heading-respect-content nil
 org-startup-indented nil
 org-adapt-indentation nil
 org-indent-indentation-per-level 0

 ;; Org styling, hide markup etc.
 org-hide-emphasis-markers t
 org-pretty-entities t
 org-ellipsis "▼"

 ;; TODO setup
 ;; org-todo-keywords
 ;; '((sequence "TODO(t)" "IN-PROGRESS(p)" "IN-REVIEW(r)" "WAITING(w)" "BLOCKED(b)" "|" "DONE(d)" "DELEGATE(D)"))
 org-todo-keywords
 '((sequence "TODO" "IN-PROGRESS" "IN-REVIEW" "WAITING" "BLOCKED" "|" "DONE" "DELEGATE" "WONT-DO"))

 org-modern-todo-faces
 '(("IN-PROGRESS" . (:forground "blue" :weight bold))
   ("IN-REVIEW" . org-verbatim)
   ("WAITING" . org-warning)
   ("BLOCKED" . org-mode-line-clock-overrun)
   ("DELEGATE" . org-warning)
   ("WONT-DO" . org-modern-time-inactive))
 ;; '(("IN-PROGRESS" . org-clock-overlay)
 ;;   ("IN-REVIEW" . org-verbatim)
 ;;   ("WAITING" . org-warning)
 ;;   ("BLOCKED" . org-mode-line-clock-overrun)
 ;;   ("DELEGATE" . org-warning)
 ;;   ("WONT-DO" . org-modern-time-inactive))

 ;; Agenda styling
 org-agenda-tags-column 0
 org-agenda-block-separator ?─
 org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000)
   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
 org-agenda-current-time-string
 "⭠ now ─────────────────────────────────────────────────")

(with-eval-after-load 'org (global-org-modern-mode))

(global-org-modern-mode)

(require 'ox-md)

(use-package org-projectile
  :ensure t
  :bind (("C-c n p" . org-projectile-project-todo-completing-read)
         ("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture))
  :config
  (progn
    (setq org-projectile-projects-file (concat (getenv "HOME") "/git/proj.orgs"))
    (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
    (push (org-projectile-project-todo-entry) org-capture-templates))
  :ensure t)

(use-package magit
  :ensure t
  :config
  (defun magit-display-buffer-pop-up-frame (buffer)
    (if (with-current-buffer buffer (eq major-mode 'magit-status-mode))
        (display-buffer buffer
                        '((display-buffer-reuse-window
                           display-buffer-below-selected)
                          (reusable-frames . t)))
      (magit-display-buffer-traditional buffer)))

  (setq magit-display-buffer-function #'magit-display-buffer-pop-up-frame)
)

(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    (setq treemacs-resize-icons 12)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

;; UI
;; Configure doom-modeline
(use-package doom-modeline
  :init (setq doom-modeline-support-imenu t)
  :config (setq doom-modeline-icon t
                doom-modeline-major-mode-icon t
                doom-modeline-major-mode-color-icon t
                doom-modeline-buffer-state-icon t
                doom-modeline-buffer-modification-icon t
                doom-modeline-indent-info t
                doom-modeline-env-enable-python t
                doom-modeline-github t
                doom-modeline-modal t
                doom-modeline-modal-icon t
                doom-modeline-github t
                doom-modeline-vcs-max-length 24
                doom-modeline-buffer-file-name-style 'truncate-with-project)
  :ensure t
  :hook (after-init . doom-modeline-mode))
(add-hook 'after-init-hook #'doom-modeline-mode)

(use-package jinja2-mode
  :ensure t)

;; Configure doom-themes
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-material t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (doom-themes-treemacs-config)
  (doom-themes-org-config))

;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  (setq vertico-count 10)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize nil)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  )

(require 'vertico-posframe)
(vertico-posframe-mode 1)
(setq vertico-posframe-parameters
      '((left-fringe . 8)
        (right-fringe . 8)))

;; Enable vertico-multiform
;; (vertico-multiform-mode)
;; (setq vertico-multiform-commands
;;       '((consult-imenu buffer indexed)
;;         (execute-extended-command unobtrusive)))
;; (setq vertico-multiform-categories
;;       '((file grid)
;;         (consult-grep buffer)))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  ;; (defun crm-indicator (args)
  ;;   (cons (format "[CRM,%s] %s"
  ;;                 (replace-regexp-in-string
  ;;                  "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
  ;;                  crm-separator)
  ;;                 (car args))
  ;;         (cdr args)))
  ;; (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(partial-completion substring initials flex orderless basic))
  (orderless-component-separator "[ //]+"))

(use-package consult
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  (consult-customize
   consult-ripgrep consult-git-grep consult-grep)
  (setq consult-narrow-key "<"))

(use-package centaur-tabs
  :demand
  :config
  (defun my-centaur-tabs-icon-for-ansi-term (original-fn mode &rest args)
    "Change the face of the icon when MODE is 'ansi-term."
    (let ((new-args (if (eq mode 'term-mode)
                        (plist-put args :face 'all-the-icons-purple)
                      args)))
      (apply original-fn mode new-args)))
  (advice-add 'centaur-tabs--icon-for-mode :around #'my-centaur-tabs-icon-for-ansi-term)
  (setq centaur-tabs-set-modified-marker t
        centaur-tabs-modified-marker "~"
        centaur-tabs-set-icons t
        ;; centaur-tabs-plain-icons t
        centaur-tabs-gray-out-icons 'buffer
        centaur-tabs-set-bar 'under)
  (centaur-tabs-mode t)

  :bind
  ("s-t" . centaur-tabs--create-new-tab)
  ("s-}" . centaur-tabs-forward)
  ("s-{" . centaur-tabs-backward))

(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))

;; (use-package lsp-mode
;;   :init
;;   set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
;;   (setq lsp-keymap-prefix "C-c l")
;;   :hook ((python-mode . lsp-deferred))
;;   :commands (lsp lsp-deferred))

;; ;; optionally
;; (use-package lsp-ui :commands lsp-ui-mode)
;; ;; if you are helm user
;; ;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; ;; if you are ivy user
;; ;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
;; ;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; ;; optionally if you want to use debugger
;; ;; (use-package dap-mode)
;; ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

;; ;; LSP servers
;; (use-package lsp-pyright
;;   :ensure t
;;   :hook (python-mode . (lambda ()
;;                           (require 'lsp-pyright)
;;                           (lsp))))  ; or lsp-deferred

;;; .emacs ends here
