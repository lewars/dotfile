# -*- mode: shell-script -*-
# Enable the subsequent settings only in interactive sessions
case $- in
  *i*) ;;
    *) return;;
esac

. $HOME/.asdf/asdf.sh
. $HOME/.asdf/completions/asdf.bash

# Path to your oh-my-bash installation.
export OSH="${HOME}/.dotfiles/oh-my-bash"

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-bash is loaded.
OSH_THEME="font"

# Uncomment the following line to use case-sensitive completion.
# OMB_CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# OMB_HYPHEN_SENSITIVE="false"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_OSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you don't want the repository to be considered dirty
# if there are untracked files.
# SCM_GIT_DISABLE_UNTRACKED_DIRTY="true"

# Uncomment the following line if you want to completely ignore the presence
# of untracked files in the repository.
# SCM_GIT_IGNORE_UNTRACKED="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.  One of the following values can
# be used to specify the timestamp format.
# * 'mm/dd/yyyy'     # mm/dd/yyyy + time
# * 'dd.mm.yyyy'     # dd.mm.yyyy + time
# * 'yyyy-mm-dd'     # yyyy-mm-dd + time
# * '[mm/dd/yyyy]'   # [mm/dd/yyyy] + [time] with colors
# * '[dd.mm.yyyy]'   # [dd.mm.yyyy] + [time] with colors
# * '[yyyy-mm-dd]'   # [yyyy-mm-dd] + [time] with colors
# If not set, the default value is 'yyyy-mm-dd'.
# HIST_STAMPS='yyyy-mm-dd'

# Uncomment the following line if you do not want OMB to overwrite the existing
# aliases by the default OMB aliases defined in lib/*.sh
# OMB_DEFAULT_ALIASES="check"

# Would you like to use another custom folder than $OSH/custom?
# OSH_CUSTOM=/path/to/new-custom-folder

# To disable the uses of "sudo" by oh-my-bash, please set "false" to
# this variable.  The default behavior for the empty value is "true".
OMB_USE_SUDO=true

# To enable/disable display of Python virtualenv and condaenv
# OMB_PROMPT_SHOW_PYTHON_VENV=true  # enable
# OMB_PROMPT_SHOW_PYTHON_VENV=false # disable

# Which completions would you like to load? (completions can be found in ~/.oh-my-bash/completions/*)
# Custom completions may be added to ~/.oh-my-bash/custom/completions/
# Example format: completions=(ssh git bundler gem pip pip3)
# Add wisely, as too many completions slow down shell startup.
completions=(
  git
  ssh
)

# Which aliases would you like to load? (aliases can be found in ~/.oh-my-bash/aliases/*)
# Custom aliases may be added to ~/.oh-my-bash/custom/aliases/
# Example format: aliases=(vagrant composer git-avh)
# Add wisely, as too many aliases slow down shell startup.
aliases=(
  general
)

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-bash/plugins/*)
# Custom plugins may be added to ~/.oh-my-bash/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  bashmarks
)

# Which plugins would you like to conditionally load? (plugins can be found in ~/.oh-my-bash/plugins/*)
# Custom plugins may be added to ~/.oh-my-bash/custom/plugins/
# Example format:
#  if [ "$DISPLAY" ] || [ "$SSH" ]; then
#      plugins+=(tmux-autoattach)
#  fi

source "$OSH"/oh-my-bash.sh

# User configuration
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-bash libs,
# plugins, and themes. Aliases can be placed here, though oh-my-bash
# users are encouraged to define aliases within the OSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias bashconfig="mate ~/.bashrc"
# alias ohmybash="mate ~/.oh-my-bash"

# Personal Configuration

export LSP_USE_PLISTS=true

# Tooling
source "${HOME}/.asdf/asdf.sh"
# source <(op completion bash)
# source "${HOME}/.config/op/plugins.sh"

# shopts
set +o noclobber
# if macosx disable autocd and dirspell
if [[ "$OSTYPE" != "darwin"* ]]; then
  shopt -s autocd
  shopt -s dirspell
fi
shopt -u histreedit
shopt -u histverify
shopt -u lithist
shopt -u nocaseglob
shopt -u nocasematch

# unalias oh-my-bash stuff
unalias s
unalias g
unalias p
unalias d

# aliases
alias fcd=qcd

alias fem="fzf --preview 'bat --color=always {}' --preview-window '~3' --bind 'enter:become(emacs {})'"
alias fh="fzf --bind 'enter:become(history)'"
alias fpv="fzf --preview 'bat --color=always {}' --preview-window '~3'"
alias g=gcloud
alias jf='sudo journalctl --follow'
alias k=kubectl
alias qpv=fpv
alias jcli=jenkins-cli

# watcher aliases
alias ccbs='cd $HOME/git/cbsi-cbscom'
alias scbs='qcd $HOME/git/cbsi-cbscom'
alias fcbs=scbs

# ?
alias cans='cd $HOME/git/ansi-anscom'
alias sans='qcd $HOME/git/ansi-anscom'
alias fans=sans

# completion scripts
. "$HOME/.asdf/asdf.sh"
. "$HOME/.asdf/completions/asdf.bash"

# functions
## A function that changes the k8 namespace
function k8cluster() {
    if [ -z "$1" ]; then
        kubectx -c
        return 0
    fi

    kubectx "$1"
}

## A function that list the current namespace
function k8listcluster() {
    kubectx
}

## A function that changes the k8 namespace
function k8ns() {
    if [ -z "$1" ]; then
        kubectl get namespaces
        return 0
    fi
    kubectl config set-context --current --namespace="$1"
}

## A function that list the current namespace
function k8listns() {
    kubectl config view --minify | grep namespace: | awk '{print $2}'
}

## A function obtains a shell on a running container
function k8sh() {
    # Set pod name
    if [ -z "$1" ]; then
        echo "Usage: k8sh <pod-name> <container-name>"
        return 1
    fi

    # Set container name
    if [ -z "$2" ]; then
        echo "Usage: k8sh <pod-name> <container-name>"
        return 1
    fi

    # Select command to run
    cmd="$3"
    if [ -z "$cmd" ]; then
        cmd="/bin/bash"
    fi

    kubectl exec -it "$1" -c "$2" -- sh -c $"$cmd"
}

## A generic function that obtains a shell on a jenkins agent
function jenkins-agent() {
    # setup namespace
    k8ns prod-cicd

    # Select jenkins agent by number
    if [ -z "$1" ]; then
        echo "Usage: jenkins-can-agent <agent_number> [cmd]"
        return 1
    fi

    # Select command to run
    cmd="$2"
    if [ -z "$cmd" ]; then
        cmd="/bin/bash"
    fi

    k8sh prod-cicd-jenkins-slave-"$1" prod-cicd-jenkins-slave "$cmd"
}

## A function that obtains a shell on a jenkins-ui agent
function jenkins-ui-agent() {
    k8cluster gke_i-cbscom-dev_us-central1_pplus-tools-cluster
    jenkins-agent "$1"
}

## A function that obtains a shell on a jenkins can agent
function jenkins-can-agent() {
    # switch to can cluster
    k8cluster gke_i-can-dev_us-central1_can-tools-cluster
    jenkins-agent "$1"
}

## A function that quickly cd's to a directory
function qcd() {
    if [ -z "$1" ]; then
        start_dir=.
    else
        start_dir="$1"
    fi

    cd "$(fd --type directory . "$start_dir" | fzf)" || return 1
}

export -f k8ns
export -f k8listns
export -f k8sh
export -f k8cluster
export -f k8listcluster
export -f jenkins-ui-agent
export -f jenkins-can-agent
export -f qcd
. $HOME/.asdf/asdf.sh
. $HOME/.asdf/completions/asdf.bash

if [[ "$OSTYPE" == "darwin"* ]]; then
    export JAVA_HOME=/usr/local/opt/openjdk
fi

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-17.0.8.0.7-1.fc37.x86_64/
fi

# source "${HOME}/.config/op/plugins.sh"
